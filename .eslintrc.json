{
    "env": {
        "browser": true,
        "commonjs": true,
        "es6": true,
        "node": true
    },
    "globals": {
        "__uri": true
    },
    "parserOptions": {
        "ecmaFeatures": {
            "jsx": true
        },
        "ecmaVersion": 8,
        "sourceType": "module"
    },
    "extends": "vue",
    "plugins": [
        "html",
        "vue"
    ],
    // 以下规则 文档： http://eslint.org/docs/rules http://eslint.org/docs/rules/xxxxx-xxxxx-xxxxx.html
    "rules": {
        // "camelcase": [2, { "properties": "always" }], // 强制使用驼峰命名

        // "no-cond-assign": 2, // 禁止在条件表达式中使用赋值语句
        // "no-constant-condition": 2, // 禁止在条件中使用常量表达式 if(true) if(1)
        // "no-empty": 2, // 代码块的内容不能为空，禁止空代码块
        // "no-empty-character-class": 2, // 正则表达式的内容不能为空，禁止使用不匹配任何字符串的正则表达式
        // "no-ex-assign": 2, // 禁止对catch语句中的异常进行赋值
        // //禁止在块语句中声明变量或函数
        // "no-inner-declarations": 2,
        // //禁止使用无效的正则语句
        // "no-invalid-regexp": 2,
        // //在in操作符左边的操作项不能用! 例如这样写不对的：if ( !a in b) { //dosomething }
        // "no-negated-in-lhs": 2,
        // //禁止把全局对象当函数调用，比如下面写法错误的：Math(), JSON()
        // "no-obj-calls": 2,
        // //禁止在正则表达式字面量中使用多个空格 /foo bar/
        // "no-regex-spaces": 2,
        // //禁止稀疏数组，清除多余的逗号申明  比如[1,,2]
        // "no-sparse-arrays": 2,
        // //为了保证两行不相关的代码不会意外的被当做一行代码来解析
        // "no-unexpected-multiline": 2,
        // //禁止和NaN作比较,推荐使用isNaN方法
        // "use-isnan": 2,
        // //用来检测JSDoc是否完整和合法
        // "valid-jsdoc": 2,
        // //在声明对象时getter和setter需成对出现
        // "accessor-pairs": 2,
        // //数值方法的回调函数中强制写return语句
        // "array-callback-return": 2,
        // //当在代码块中用var声明变量，并在代码块外使用时报错 
        // "block-scoped-var": 0,
        // //用来控制函数的复杂度，分支超过5时报错
        // "complexity": [2, 5],
        // //不同分支的return语句不能返回不同的类型，要么一致要么都没有
        // "consistent-return": 0,
        // // if else while for do后面的代码块是否需要{ }包围，参数：
        // // multi         只有块中有多行语句时才需要{ }包围
        // // multi-line    只有块中有多行语句时才需要{ }包围, 但是块中的执行语句只有一行时，块中的语句只能跟和if语句在同一行。
        // //                if (foo) foo++; else doSomething();
        // // multi-or-nest 只有块中有多行语句时才需要{ }包围, 如果块中的执行语句只有一行，执行语句可以另起一行也可以跟在if语句后面
        // // [2, "multi", "consistent"] 保持前后语句的{ }一致
        // // default: [2, "all"] 全都需要{ }包围
        // "curly": 2,
        // //所有的switch语句都必须要有一个default分支
        // "default-case": 2,
        // // 在书写对象的属性或方法时，新的一行代码可以以. 开头，也可以以. 结束。
        // // 强制统一object.key中 . 的位置，参数:
        // //      property，'.'号应与属性在同一行
        // //      object, '.' 号应与对象名在同一行
        // "dot-location": [2, "property"],
        // // 强制使用.号取属性
        // // 参数： allowKeywords：true  使用保留字做属性名时，只能使用.方式取属性
        // //                       false 使用保留字做属性名时, 只能使用[]方式取属性
        // //                       e.g [2, {"allowKeywords": false}]
        // //        allowPattern:  当属性名匹配提供的正则表达式时，允许使用[]方式取值,否则只能用.号取值
        // //                       e.g [2, {"allowPattern": "^[a-z]+(_[a-z]+)+$"}]
        // "dot-notation": [2, { "allowKeywords": true }],
        // //在进行比较时，必须使用全等=== 和完全不等!==
        // "eqeqeq": [2, "allow-null"],
        // //禁止使用arguments.caller和arguments.callee
        // "no-caller": 2,
        // //禁止在case/default语句中使用lexical declarations，例如let, const, function and class
        // //因为在case/default中的声明，在整个switch语句中都能够访问到，如果需要声明变量，可以加大括号。
        // "no-case-declarations": 2,
        // //用来消除/ (除号)操作符对程序员的迷惑，比如在正则表达式/=foo/中，我们并不能够确定第一个/是除号还是正则表达式，因此我们需要在等号前面加一个转移符/\=foo/
        // "no-div-regex": 2,
        // //在if else语句中，如果else语句中只含有一个return语句，那么完全可以不使用else语句，直接return。
        // "no-else-return": 2,
        // //不允许空函数
        // "no-empty-function": 2,
        // //在结构赋值时，模式不能为空。在ECMAScript2015的结构赋值中，模式为空是不会报错的，只是这样的结构赋值没有任何效果，该条规则就保证了模式不能为空，也就保证了结构赋值的有效性。
        // "no-empty-pattern": 2,
        // //保证了在和null比较时使用===和!==，而不能够使用==和!=
        // "no-eq-null": 2,
        // //禁止使用eval函数
        // "no-eval": 2,
        // //禁止扩展native对象，不能向native的对象上面添加属性
        // "no-extend-native": 2,
        // //保证了调用bind方法的函数体内有this对象。规避了不必要的使用bind方法的情况。
        // //箭头函数中没有this对象，也就不能够使用bind()方法。该规则保证了在所有的箭头函数中使用bind方法将被视为错误。
        // "no-extra-bind": 2,
        // //如果 loop中没有内嵌的loops或switches, loop标签是不必要的.
        // "no-extra-label": 2,
        // //在case语句中尽量加break，避免不必要的fallthrough错误，消除从一个case到另一个case的非故意的「fall through」。
        // //如果没有添加break等终止语句或者没有添加注释语句，将会抛出错误
        // "no-fallthrough": 2,
        // //在使用浮点小数时，不能够省略小数点前面的数或者后面的数，必须写。比如.2 2. 应该写2.2 2.0 
        // "no-floating-decimal": 2,
        // //禁止隐式转换，为了消除简写的类型转换
        // "no-implicit-coercion": 2,
        // //禁止在全局作用域里声明变量或函数
        // "no-implicit-globals": 2,
        // //在setTimeout(), setInterval() or execScript()中消除隐式eval的使用
        // "no-implied-eval": 2,
        // //禁止无效的this，只能用在构造器，类，对象字面量
        // "no-invalid-this": 2,
        // //禁止使用__iterator__属性
        // "no-iterator": 2,
        // //禁止使用label语句，以避免无限循环
        // "no-labels": [2, { "allowLoop": false, "allowSwitch": false }],
        // //禁止使用不必要的嵌套代码块
        // "no-lone-blocks": 2,
        // //禁止在循环体中定义函数并且函数引用了外部变量
        // //在循环中定义了函数，但是函数内部没有引用外部变量，或者使用let定义的代码块变量，视为合法
        // "no-loop-func": 2,
        // //禁止使用魔法数字，建议使用常量来代替
        // "no-magic-numbers": 2,
        // //保证了在逻辑表达式、条件表达式、申明语句、数组元素、对象属性、sequences、函数参数中不使用超过一个的空白符。
        // "no-multi-spaces": 2,
        // //该规则保证了字符串不分行书写。
        // "no-multi-str": 2,
        // //该规则保证了不重写原生对象。
        // "no-native-reassign": 2,
        // //在使用new来调用构造函数后，必须把生成的实例赋值给一个变量
        // "no-new": 2,
        // //禁止使用new Function(); 语句。
        // "no-new-func": 2,
        // //禁止使用new创建String,Number, and Boolean实例
        // "no-new-wrappers": 2,
        // //禁止使用八进制数字
        // "no-octal": 2,
        // //禁止使用八进制转义序列，比如 var foo = "Copyright \251";
        // "no-octal-escape": 2,
        // //禁止对函数的参数重新进行无意义的赋值
        // "no-param-reassign": 2,
        // //禁止使用__proto__属性
        // "no-proto": 2,
        // //避免重复声明一个变量
        // "no-redeclare": [2, { "builtinGlobals": true }],
        // //不要在return语句中使用赋值语句
        // "no-return-assign": [2, "always"],
        // //禁止代码中使用类似javascript:void(0)的javascript: urls.
        // "no-script-url": 2,
        // //禁止给自身赋值
        // "no-self-assign": 2,
        // //禁止和自身作比较
        // "no-self-compare": 2,
        // //禁止可能导致结果不明确的逗号操作符
        // "no-sequences": 2,
        // //通过throw语句抛出的对象必须是Error对象本身或者通过Error对象定义的对象。有些情况除外，见官网
        // "no-throw-literal": 2,
        // //禁止使用不被修改的循环条件
        // "no-unmodified-loop-condition": 2,
        // //禁止在代码中出现没有被使用到的表达式或值
        // "no-unused-expressions": [2, { "allowShortCircuit": true, "allowTernary": true }],
        // //禁止在代码中出现没有被使用到的标签
        // "no-unused-labels": 2,
        // //避免使用没有意义的call() 和 apply()
        // "no-useless-call": 2,
        // //避免使用不必要的字符串拼接
        // "no-useless-concat": 2,
        // //不要使用void操作符
        // "no-void": 2,
        // //生产代码中不能出现warning-comments包含的注释
        // "no-warning-comments": [2, { "terms": ["todo", "fixme", "any other term"], "location": "anywhere" }],
        // //不要使用with语句
        // "no-with": 2,
        // //在使用parseInt()方法时，必须要传递第二个参数来帮助解析。
        // "radix": 2,
        // //在通过var声明变量时，应该放在代码所在作用域的顶部
        // "vars-on-top": 2,
        // //立即执行函数需要通过圆括号包围
        // "wrap-iife": 2,
        // //yoda条件语句就是对象字面量应该写在比较操作符的左边，而变量应该写在比较操作符的右边
        // //默认的规则要求，变量写在左边而字面量写在右边
        // //"yoda": 2,

        // //禁止使用delete删除var声明的变量
        // "no-delete-var": 2,
        //  //防止label和声明的变量重名
        // "no-label-var": 2,

        // //规定了逗号前后的空白，默认配置规定逗号前面没有空白，而逗号后面需要留空白
        // "comma-spacing": [2, { "before": false, "after": true }],

        // //规定了逗号放的位置，默认配置逗号应该放在行末，如果设置为first，逗号就应放在行首
        // "comma-style": [2, "last"],

        // //规定了标识符命名的黑名单
        // //"id-blacklist": [2, "data", "err", "e", "cb", "callback"],

        // //规定注释和代码块之间是否留空行
        // "lines-around-comment": 2,
        // //规定代码最多可以嵌套多少层
        // "max-depth": [2, 4],
        // //规定了代码单行的最大长度
        // "max-len": [2, 120, 4],
        // //规定了回调的最大嵌套层数
        // "max-nested-callbacks": [2, 10],
        // //规定了函数参数的最大个数
        // "max-params": [2, 3],
        // //规定了函数中代码不能够超过多少行
        // "max-statements": [2, 10],

        // //在if语句中使用了否定表达式，同时else语句又不为空，那么这样的if-else语句将被视为不合法，为什么不将其反过来这样代码更容易理解，该规则同样适用于三元操作符
        // "no-negated-condition": 2,

        // //三元操作符禁止嵌套
        // "no-nested-ternary": 2,

        // //函数调用时，函数名和圆括号之间不能有空格
        // "no-spaced-func": 2,

        // //禁止使用三元操作符
        // "no-ternary": 2,

        // //禁止行末加空格
        // "no-trailing-spaces": 2,

        // //禁止属性操作符.的前后和[之前有空格
        // "no-whitespace-before-property": 2,

        // //规定对象字面量中大括号内是否允许加空格，也适用于ES6中的结构赋值和模块import和export
        // "object-curly-spacing": [2, "always"],

        // //在代码块中，代码块的开始和结尾是否应该留一个空行
        // "padded-blocks": 0,

        // //对象的属性名是否强制加双引号
        // //"quote-props": [2, "always"],

        // //函数定义时，function关键字后面的小括号前是否需要加空格
        // "space-before-function-paren": [2, "never"],
        // "keyword-spacing": ["warn", { "after": true, "before": true }],

        // //中綴操作符左右是否添加空格 1+1 => 1 + 1
        // "space-infix-ops": 2,

        // //class中的成员不允许有相同的名字
        // "no-dupe-class-members": 2,

        // //禁止在Symbol对象前使用new操作符
        // "no-new-symbol": 2,

        // //ES6中提供了定义对象字面量的方法和属性的简写形式。强制要求在对象字面量中使用方法和属性的简写形式
        // "object-shorthand": 2,

        // //函数作为函数的参数传入时，传入的函数需要是箭头函数
        // //箭头函数中的this对象直接绑定到了其外面包围的函数的this对象。
        // "prefer-arrow-callback": 2,

        // // 在ES2015(ES6)中推荐使用剩余参数(...rest)代替arguments变量
        // "prefer-rest-params": 2,

        // //在ES2015(ES6)中推荐使用扩展符替代apply()方法
        // "prefer-spread": 2,

        // //在ES2015(ES6)中推荐使用模板代替以前的字符串拼接
        // "prefer-template": 2,
        
        // "prefer-const": "error", // 如果一个变量声明后不再被修改，那么应使用const来声明该变量
        // "no-const-assign": "error", // 禁止修改const声明的变量
        // "no-this-before-super": "error", // 在构造函数中，禁止在super()调用前使用this/super对象
        // "no-undef": "error", // 禁止使用未被定义的变量，除非已在配置文件的global中进行了说明。
        // "no-unreachable": "error", // 禁止有执行不到的代码
        // "no-unused-vars": "error", // 不允许定义的变量在后面的代码中没有被使用到
        // "constructor-super": "error", // 保证constructor函数中super()应正确出现，比如在继承的classes中（派生类）必须使用super，否则（非派生类）不要使用super。
        // "valid-typeof": "error", // typeof 操作符返回的结果必须和"undefined"/"object"/"boolean"/"number"/"string"/"function"六个字符串作比较
        // "no-dupe-args": "error", // 函数参数禁止重名
        // "no-dupe-keys": "error", // 在创建对象字面量时不允许键重复 
        // "no-duplicate-case": "error", // 在switch语句中禁止重复的case
        // "no-extra-boolean-cast": "error", // 禁止不必要的bool转换
        // "no-extra-parens": "error", // 禁止使用多余的圆括号
        // "no-irregular-whitespace": "error", // 禁止使用不合法或者不规则的空白符
        // "array-bracket-spacing": ["error", "always"], // 用数组字面量定义数组时数组元素前后是否加空格 [1, 2] => [ 1, 2 ]
        // "block-spacing": ["error", "always"], // 在单行代码块中，代码块前后是否需要留空格  if (foo) { bar = 0;}
        // "key-spacing": "error", // 对象字面量语法中key和value之间的空白，冒号前不要留空格，冒号后面需留一个空格
        // "new-cap": "error", // 使用构造函数(new)时首字母需大写，首字母大写的函数需用new操作符
        // "new-parens": "error", // 使用构造函数(new)时必须圆括号不能省略
        // "newline-after-var": "error", // 规定了变量声明后是否需要空行
        // "no-multiple-empty-lines": ["error", {"max": 2}], // 不要留超过规定数目的空白行
        // "no-mixed-spaces-and-tabs": "error", // 禁止混用tab和空格
        // "no-extra-semi": "error", // 禁止多余的分号
        // "semi-spacing": ["error", {"before": false, "after": true}], // 分号之后强制使用空格，并在分号之前禁用空格。
        // "brace-style": "error" // if while function 后面的{必须与if在同一行
        "spaced-comment": [2, "always", {
            "exceptions": ["<release>", "</release>", "<debug>", "</debug>", "<test>", "</test>"]
        }], // 注释起始符// or /*后面至少紧跟一个空格
        "semi": ["error", "always"], // 必须写分号
        "comma-dangle": [2, "always-multiline"], // 数组和对象键值对最后一个逗号.多行模式必须带逗号，单行模式不能带逗号
        "indent": ["error", 4] // 统一代码缩进方式，4 spaces
    }
}